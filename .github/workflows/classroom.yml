name: CI/CD

on:
  create:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      bin_flag:
        description: "Use --bin"
        default: false
        type: boolean
  
env:
  BUILDLOG: "build.log"
  OUTLOG: "result.log"
  
defaults:
  run:
    shell: pwsh

jobs:
  buildtest:
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        os:  [ubuntu-24.04, windows-latest] 
    
    runs-on: ${{ matrix.os }}
    timeout-minutes: 4
    env:    
      STUPID_LINUX_LIBM: $(If ('${{ matrix.os }}' -eq 'windows-latest') {''} Else {'-lm'})
      EXE: __test.exe

    steps:
      - uses: actions/checkout@v4
          
      - name: init
        id: init
        run: |
          echo "# Parameters" >> $env:GITHUB_STEP_SUMMARY  
          echo " Use --bin: $${{ inputs.bin_flag }}" >> $env:GITHUB_STEP_SUMMARY            
        
      - name: detect_lang
        id: detect_lang
        run: | 
          echo "# Detect language" >> $env:GITHUB_STEP_SUMMARY
          $ErrorActionPreference = 'SilentlyContinue'
          $python = Get-ChildItem -Force -File -Name main.py
          $cpp = Get-ChildItem -Force -File -Name main.cpp
          $c = Get-ChildItem -Force -File -Name main.c

          [void](mkdir __build)

          "::group::debug info"
          echo "python=$python $($python.GetType()) $($python.GetType() -eq [String])"
          echo "cpp=$cpp $($cpp.GetType()) $($cpp.GetType() -eq [String])"
          echo "c=$c $($c.GetType()) $($c.GetType() -eq [String])"
          "::endgroup::" 

          if ($python.GetType() -eq [String])
          {
              echo "Detect ✅: Python">> $env:GITHUB_STEP_SUMMARY
              echo "lang=0" >> $env:GITHUB_OUTPUT 
              exit(0)
          }
          if ($cpp.GetType() -eq [String])
          {
              $version = $(clang++ --version) -join "`n"
              echo "Detect ✅: C++">> $env:GITHUB_STEP_SUMMARY
                echo '```' >> $env:GITHUB_STEP_SUMMARY
                echo "$($version)">> $env:GITHUB_STEP_SUMMARY
                echo '```' >> $env:GITHUB_STEP_SUMMARY
                echo "lang=1" >> $env:GITHUB_OUTPUT      
              exit(0)
          }
          if ($c.GetType() -eq [String])
          {
              $version = $(clang --version) -join "`n"
              echo "Detect ✅: C">> $env:GITHUB_STEP_SUMMARY
                echo '```' >> $env:GITHUB_STEP_SUMMARY
                echo "$($version)">> $env:GITHUB_STEP_SUMMARY
                echo '```' >> $env:GITHUB_STEP_SUMMARY
                echo "lang=2" >> $env:GITHUB_OUTPUT      
              exit(0)
          }
          echo "Detect failed ❌">> $env:GITHUB_STEP_SUMMARY             
          exit(1)

      - uses: actions/setup-python@v5
        if: steps.detect_lang.outputs.lang == 0
        with:
          python-version: '3.12'
          architecture: 'x64'
          
      - name: setup-python-info
        if: steps.detect_lang.outputs.lang == 0
        run: |
            $version = $(python --version) -join "`n"
            echo '```' >> $env:GITHUB_STEP_SUMMARY
            echo "$($version)">> $env:GITHUB_STEP_SUMMARY
            echo '```' >> $env:GITHUB_STEP_SUMMARY         

      - name: build
        id: build
        if: steps.detect_lang.outputs.lang > 0
        run: |   
          #Get-ChildItem Env:* | Select-Object -Property Name,Value | Sort-Object -Property Name
          $failed = $false
          try 
          {
            $ErrorActionPreference = 'SilentlyContinue'
                 
            cd __build 
            clang --version
            if (${{ steps.detect_lang.outputs.lang }} -eq 2)  
            {
              pwsh -Command { clang -std=c2x -D _CRT_SECURE_NO_WARNINGS -D _USE_MATH_DEFINES -O2 -Wvla -I '../include/' $((Get-ChildItem -Path .. -Include @('*.c') -Recurse -ErrorAction SilentlyContinue -Force).FullName) -o ${{env.EXE}} *>&1 > ${{env.BUILDLOG}} } 
            }
            else
            {
              pwsh -Command { clang++ -std=c++20 -D _CRT_SECURE_NO_WARNINGS -D _USE_MATH_DEFINES -O2 -I '../include/' $((Get-ChildItem -Path .. -Include @('*.cpp') -Recurse -ErrorAction SilentlyContinue -Force).FullName) -o ${{env.EXE}} *>&1 > ${{env.BUILDLOG}} } 
            }
            
            $build_exit_code = $LastExitCode     
          } 
          catch
          {
            $build_exit_code = $LastExitCode
            Write-Output "❌ build failed!"
            $failed = $true
          } 
          finally 
          {
            $blog="$(Get-Content ${{env.BUILDLOG}} -Raw)"
            echo "# Build" >> $env:GITHUB_STEP_SUMMARY
            echo '```' >> $env:GITHUB_STEP_SUMMARY
            "$blog" >> $env:GITHUB_STEP_SUMMARY
            echo '```' >> $env:GITHUB_STEP_SUMMARY
            
            Write-Output "::notice Build log (can be empty):"
            "::group::Build log"
            echo $blog
            echo "::endgroup::"  
            if ($failed) { echo "## Build failed" >> $env:GITHUB_STEP_SUMMARY }
          }
          exit($build_exit_code + (-not (Test-Path -Path "./${{env.EXE}}" -PathType Leaf)) )
                         
      - name: tests
        id: tests
        run: |     
          echo "# Testing" >> $env:GITHUB_STEP_SUMMARY
            
            $bin = if ($${{inputs.bin_flag}}) { @("--bin","${{matrix.os}}.bin") } else { }
            $asm = @("--asm", "rv32im.asm")
            
            if (${{ steps.detect_lang.outputs.lang }})  
            { & ./__build/${{env.EXE}} $asm $bin 2>stderr.log 1>stdout.log }
            else
            { python ./main.py $asm $bin 2>stderr.log 1>stdout.log  }
            $exit_code_p = $LastExitCode           
            
            $stderr = if ((& Test-Path -Path stderr.log -PathType Leaf)) { $(Get-Content stderr.log -Raw) } else {'<empty>'}
            $stdout = if ((& Test-Path -Path stdout.log -PathType Leaf)) { $(Get-Content stdout.log -Raw) } else {'<empty>'}
            $stdout1 = ""
            try { $stdout1 = $stdout.replace('`n', '<br>') } catch { $stdout1 = '<empty>' }
                   
            echo "[stdout]:" >> $env:GITHUB_STEP_SUMMARY            
              echo '```' >> $env:GITHUB_STEP_SUMMARY
              "$stdout" >> $env:GITHUB_STEP_SUMMARY
              echo '```' >> $env:GITHUB_STEP_SUMMARY                          
            echo "exit code: $exit_code_p
            " >> $env:GITHUB_STEP_SUMMARY           
                               
            echo "[stderr]:" >> $env:GITHUB_STEP_SUMMARY              
            echo '```' >> $env:GITHUB_STEP_SUMMARY
            "$stderr" >> $env:GITHUB_STEP_SUMMARY
            echo '```' >> $env:GITHUB_STEP_SUMMARY

            $test_exit_code = 0
            echo "Result:" >> $env:GITHUB_STEP_SUMMARY 
            if ($exit_code_p -ne 0)
            {         
              echo '```' >> $env:GITHUB_STEP_SUMMARY      
              echo "❌ [ERROR] Program completed with code $exit_code_p (!= 0)" >> $env:GITHUB_STEP_SUMMARY 
              echo '```' >> $env:GITHUB_STEP_SUMMARY               
              $test_exit_code += 10
            }          
            elseif (($${{inputs.bin_flag}}) -and (& Test-Path -Path stderr.log -PathType Leaf) -and ((Get-ChildItem -Path stderr.log).Length -ne 0))
            {
              echo '```' >> $env:GITHUB_STEP_SUMMARY
              echo "❌ [ERROR] Stderr is not empty without '--bin' [program completed with code $exit_code_p]" >> $env:GITHUB_STEP_SUMMARY        
              echo '```' >> $env:GITHUB_STEP_SUMMARY       
              $test_exit_code += 100
            } 
            elseif ((& Test-Path -Path stdout.log -PathType Leaf) -and ($stdout1 -eq '<empty>'))
            {
              echo '```' >> $env:GITHUB_STEP_SUMMARY
              echo "❌ [ERROR] Stdout is empty [program completed with code $exit_code_p]" >> $env:GITHUB_STEP_SUMMARY  
              echo '```' >> $env:GITHUB_STEP_SUMMARY              
              $test_exit_code += 1000
            }
            else
            {
                echo '```' >> $env:GITHUB_STEP_SUMMARY
                echo "⚠️ PASSED (check manually)" >> $env:GITHUB_STEP_SUMMARY
                echo '```' >> $env:GITHUB_STEP_SUMMARY
            } 
            ls
            ls __build
                    
          exit($test_exit_code)

      - uses: actions/upload-artifact@v4
        if: inputs.bin_flag
        with:
          name: ${{matrix.os}}.bin
          path: ${{matrix.os}}.bin
          retention-days: 1
          compression-level: 8
          if-no-files-found: error
          
